name: tests

on: [push]

jobs:

  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: set up env
      run: cp .env.default .env
    - name: docker-compose pull
      run: docker-compose pull
    - uses: satackey/action-docker-layer-caching@v0.0.8
    - name: docker-compose build
      run: docker-compose build --build-arg UID="$UID"
    - name: docker-compose up services
      run: docker-compose up -d db redis
    - name: Test
      run: |
        docker-compose run service pybabel compile -d locale
        docker-compose run service coverage run ./manage.py test
        docker-compose run service coverage report
        docker-compose run service coverage xml
    - name: Send coverage to Codacy
      env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }}
      run: |
        pip install codacy-coverage==1.3.11
        python-codacy-coverage -r ./coverage.xml
      continue-on-error: true

    # Repo metadata
    - name: Repo metadata
      id: repo
      uses: actions/github-script@v3
      with:
        script: |
          const repo = await github.repos.get(context.repo)
          return repo.data

    # Prepare variables
    - name: Prepare
      id: prep
      run: |
        REG=ghcr.io
        IMAGE=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')
        DOCKER_IMAGE=${REG}/${IMAGE}
        VERSION=nool
        if [ "${{ github.event_name }}" = "schedule" ]; then
          VERSION=nightly
        elif [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          VERSION=$(echo ${GITHUB_REF#refs/heads/} | sed -r 's#/+#-#g')
          if [ "${{ github.event.repository.default_branch }}" = "$VERSION" ]; then
            VERSION=latest
          fi
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          VERSION=pr-${{ github.event.number }}
        fi
        TAGS="${DOCKER_IMAGE}:${VERSION}"
        if [[ $VERSION =~ ^v[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
          MINOR=${VERSION%.*}
          MAJOR=${MINOR%.*}
          TAGS="$TAGS,${DOCKER_IMAGE}:${MINOR},${DOCKER_IMAGE}:${MAJOR},${DOCKER_IMAGE}:latest"
        fi
        echo ::set-output name=version::${VERSION}
        echo ::set-output name=tags::${TAGS}
        echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
    # Set up Buildx env
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    # Login
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    # Build image and push to registry
    - name: Build and push
      uses: docker/build-push-action@v2
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64,linux/386
        push: true
        tags: ${{ steps.prep.outputs.tags }}
        labels: |
          org.opencontainers.image.title=${{ fromJson(steps.repo.outputs.result).name }}
          org.opencontainers.image.description=${{ fromJson(steps.repo.outputs.result).description }}
          org.opencontainers.image.url=${{ fromJson(steps.repo.outputs.result).html_url }}
          org.opencontainers.image.source=${{ fromJson(steps.repo.outputs.result).html_url }}
          org.opencontainers.image.version=${{ steps.prep.outputs.version }}
          org.opencontainers.image.created=${{ steps.prep.outputs.created }}
          org.opencontainers.image.revision=${{ github.sha }}
          org.opencontainers.image.licenses=${{ fromJson(steps.repo.outputs.result).license.spdx_id }}
