"""auto_20190306_1934

Revision ID: 79fd60fe1187
Revises: 91196c1f9f51
Create Date: 2019-03-06 19:34:47.031946

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import relationship
from sqlalchemy.orm.session import Session
from sqlalchemy.orm.exc import NoResultFound
from sqlalchemy.ext.declarative import declarative_base


# revision identifiers, used by Alembic.
revision = '79fd60fe1187'
down_revision = '91196c1f9f51'
branch_labels = None
depends_on = None

Base = declarative_base()

# TODO: library with all currencies
CURRENCIES = [
    'NIO', 'AFN', 'UYU', 'NPR', 'GYD', 'CAD', 'LYD', 'BZD',
    'FJD', 'SOS', 'BWP', 'ETB', 'MAD', 'JOD', 'BMD', 'RUB',
    'MMK', 'UGX', 'HTG', 'XDR', 'CVE', 'GEL', 'ZWL', 'BIF',
    'LKR', 'BGN', 'CLP', 'VUV', 'RSD', 'SGD', 'MYR',
    'JMD', 'CUP', 'KMF', 'KPW', 'XPF', 'SCR', 'TZS', 'AZN',
    'AUD', 'KHR', 'BOB', 'PKR', 'ARS', 'CZK', 'ANG', 'AOA',
    'KWD', 'XPD', 'KES', 'SBD', 'PHP', 'PGK', 'USD', 'OMR',
    'GBP', 'XAU', 'HNL', 'EUR', 'CLF', 'YER', 'BYR', 'FKP',
    'ZMW', 'WST', 'STD', 'MUR', 'ISK', 'THB', 'BND', 'IRR',
    'IDR', 'SVC', 'QAR', 'NGN', 'BDT', 'MGA', 'CRC', 'NAD',
    'XCD', 'SAR', 'RON', 'IQD', 'KGS', 'AMD', 'SZL', 'ALL',
    'HRK', 'MRO', 'BHD', 'DZD', 'TMT', 'BSD', 'ZAR', 'MNT',
    'UZS', 'TND', 'GHS', 'EGP', 'RWF', 'SYP', 'ERN', 'TOP',
    'TWD', 'CDF', 'MOP', 'MXN', 'BAM', 'XOF', 'VND', 'MKD',
    'MDL', 'AWG', 'SDG', 'KRW', 'PYG', 'XAG', 'COP', 'ILS',
    'PEN', 'JPY', 'PAB', 'PLN', 'UAH', 'LRD', 'DOP',
    'BRL', 'LAK', 'TJS', 'TTD', 'AED', 'XPT', 'GTQ', 'BTC',
    'INR', 'DJF', 'GMD', 'LBP', 'BTN', 'CNY', 'VEF', 'MWK',
    'MVR', 'KYD', 'SEK', 'CHF', 'LSL', 'NZD', 'MZN', 'HKD',
    'KZT', 'GNF', 'BBD', 'NOK', 'TRY', 'DKK', 'SRD', 'SLL',
    'XAF', 'SHP', 'GIP', 'HUF', 'LTC', 'BYN', 'ETH', 'DGB',
    'BURST', 'XMR', 'ZEC', 'CUC', 'ZMK', 'GGP', 'JEP', 'IMP',
]
CURRENCIES.sort()


class Currency(Base):
    __tablename__ = 'currencies'

    id = sa.Column(sa.Integer, primary_key=True)
    name = sa.Column(sa.Text, unique=True)


class ChatRequests(Base):
    __tablename__ = 'chat_requests'

    id = sa.Column(sa.Integer, primary_key=True)
    chat_id = sa.Column(sa.BigInteger)
    first_currency_id = sa.Column(sa.Integer, sa.ForeignKey('currencies.id'), nullable=True)
    second_currency_id = sa.Column(sa.Integer, sa.ForeignKey('currencies.id'), nullable=True)
    currencies = sa.Column(sa.Text)
    times = sa.Column(sa.Integer, server_default='0')
    modified_at = sa.Column(sa.TIMESTAMP, server_default=sa.func.now(), onupdate=sa.func.now())

    first_currency = relationship('Currency', foreign_keys=[first_currency_id])
    second_currency = relationship('Currency', foreign_keys=[second_currency_id])


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('currencies',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.alter_column('chat_requests', 'cnt', new_column_name='times')
    op.add_column('chat_requests', sa.Column('first_currency_id', sa.Integer(), nullable=True))
    op.add_column('chat_requests', sa.Column('second_currency_id', sa.Integer(), nullable=True))
    # ### end Alembic commands ###

    # fill currencies
    currencies = [Currency(name=name) for name in CURRENCIES]
    session = Session(bind=op.get_bind())
    session.add_all(currencies)
    session.flush()

    def replace_cur(cur):
        if cur == 'B_C':
            return 'BURST'
        else:
            return cur

    # migrating currencies to foreignkey
    i = 0
    for x in session.query(ChatRequests).yield_per(1000):
        first_currency_name = replace_cur(x.currencies[:3])
        second_currency_name = replace_cur(x.currencies[3:])

        try:
            first_currency = session.query(Currency).filter_by(name=first_currency_name).one()
            second_currency = session.query(Currency).filter_by(name=second_currency_name).one()
            x.first_currency = first_currency
            x.second_currency = second_currency
            session.add(x)

            i += 1
            if i % 100 == 0:
                session.flush()
        except NoResultFound:
            print(f'Not found: {x.currencies}, delete.')
            session.delete(x)

    op.drop_column('chat_requests', 'currencies')
    op.alter_column('chat_requests', sa.Column('first_currency_id', sa.Integer(), nullable=False))
    op.alter_column('chat_requests', sa.Column('second_currency_id', sa.Integer(), nullable=False))
    op.create_foreign_key(None, 'chat_requests', 'currencies', ['first_currency_id'], ['id'])
    op.create_foreign_key(None, 'chat_requests', 'currencies', ['second_currency_id'], ['id'])


def downgrade():
    pass
